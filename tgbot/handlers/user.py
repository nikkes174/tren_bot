from aiogram import Router, F, Dispatcher
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from aiogram import Bot
from aiogram.types import CallbackQuery

from yookassa import Configuration
import os
import random
import asyncio

from tgbot.database import check_date_tranning, add_date_tranning
from tgbot.database import check_payment
from .admin import is_admin, ADMINS
from .payment import create_payment, check_payment_loop
from tgbot.keyboards.inline import choice_gender, activity_level, to_back, first_start_keyboard, \
    training_period, choice_goal, gender_for_trening, level_trening_wooman, level_trening_mans, payment_start

TOKEN = "7781808909:AAHhB7Od4aGe95BRS0_MLa7JbZEU36k96M8"
YOOKASSA_SHOP_ID = "1032008"
YOOKASSA_SECRET = "live_CEqPQ1lwbzMqCs-61XbxCeYvrqczpNzmMVQU5o3hXO8"
Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_SECRET
user_router = Router()
dp = Dispatcher()



class UserData(StatesGroup):
    gender = State()
    age = State()
    weight = State()
    height = State()
    activity = State()
    goal = State()
    waiting_for_email = State()


@user_router.message(CommandStart())
async def user_start(message: Message):
    try:
        await message.delete()
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    await message.answer(
        f"""üèãÔ∏è‚Äç‚ôÇÔ∏è–ü—Ä–∏–≤–µ—Ç! –†–∞–¥, —á—Ç–æ —Ç—ã –∑–¥–µ—Å—å!üèãÔ∏è‚Äç‚ôÇÔ∏è

    –ó–Ω–∞—á–∏—Ç —Ç–≤–æ—è —Ü–µ–ª—å ‚Äî –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ç–≤–æ–∏ –º–µ—á—Ç—ã –æ —Ç–µ–ª–µ, –∑–¥–æ—Ä–æ–≤—å–µ –∏ —ç–Ω–µ—Ä–≥–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. 
    –ú–æ–π –±–æ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–ª–∞–Ω, –∞ —Ü–µ–ª—ã–π —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Ç–µ–±—è.
    –í—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ ‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º‚ÑπÔ∏è

    P.S. –∏ –µ—â–µ –±–æ–ª—å—à–µ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö üëáüèª
    IG : @smngrsmv_fit
    TG : https://t.me/smngrsmv
    """,
        reply_markup=first_start_keyboard()
    )


@user_router.callback_query(F.data == "training_programs")
async def training_programs_handler(callback_query: CallbackQuery, bot: Bot):
    user_id = callback_query.from_user.id
    try:
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    if is_admin(user_id) or check_payment(user_id):
        await bot.send_message(
            user_id,
            "‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø! –í–æ—Ç –≤–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:",
            reply_markup=training_period()
        )
        return
    payment_id, payment_url = create_payment(2000.00)
    await bot.send_message(
        user_id,
        f"‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.",
        reply_markup=payment_start(payment_url)
    )
    asyncio.create_task(check_payment_loop(payment_id, user_id, bot))


@user_router.callback_query(F.data == "back_to_menu")
async def take_menu(call: CallbackQuery):
    try:
        await call.message.edit_text(
            text="–ö–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            reply_markup=first_start_keyboard()
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


@user_router.callback_query(F.data == "calculation_kal")
async def ask_gender(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        text="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª ü•∑üèª/üßöüèª",
        reply_markup=choice_gender()
    )


@user_router.callback_query(F.data.in_(["the_man", "the_woman"]))
async def ask_age(call: CallbackQuery, state: FSMContext):
    gender = "–ú—É–∂—Å–∫–æ–π" if call.data == "the_man" else "–ñ–µ–Ω—Å–∫–∏–π"
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–æ–ª: {gender}")
    await state.update_data(gender=gender)
    await state.set_state(UserData.age)

    try:
        await call.message.delete()
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    new_message = await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç):")
    data = await state.get_data()
    last_message_id = data.get("last_message_id")

    if last_message_id:
        try:
            await call.message.bot.delete_message(chat_id=call.message.chat.id, message_id=last_message_id)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    await state.update_data(last_message_id=new_message.message_id)


@user_router.message(UserData.age)
async def ask_weight(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        if age < 10 or age > 100:
            raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
        await state.update_data(age=age)
        await state.set_state(UserData.weight)
        try:
            await message.delete()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (10-100 –ª–µ—Ç).")


@user_router.message(UserData.weight)
async def ask_height(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        if weight < 30 or weight > 300:
            raise ValueError("–í–µ—Å –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")

        # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(weight=weight)
        await state.set_state(UserData.height)

        new_message = await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")

        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        last_message_id = data.get("last_message_id")
        if last_message_id:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=last_message_id)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await state.update_data(last_message_id=new_message.message_id)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å —á–∏—Å–ª–æ–º (30-300 –∫–≥).")


@user_router.message(UserData.height)
async def ask_goal(message: Message, state: FSMContext):
    try:
        height = float(message.text)
        if height < 100 or height > 250:
            raise ValueError("–†–æ—Å—Ç –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
        await state.update_data(height=height)
        await state.set_state(UserData.goal)
        new_message = await message.answer(
            "–ö–∞–∫–∞—è –≤–∞—à–∞ —Ü–µ–ª—å? üéØ",
            reply_markup=choice_goal()
        )
        data = await state.get_data()
        last_message_id = data.get("last_message_id")
        if last_message_id:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=last_message_id)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await state.update_data(last_message_id=new_message.message_id)

    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º (100-250 —Å–º).")


@user_router.callback_query(UserData.goal)
async def ask_activity(call: CallbackQuery, state: FSMContext):
    goal = call.data
    await state.update_data(goal=goal)
    await state.set_state(UserData.activity)
    try:
        await call.message.delete()
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    await call.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
        reply_markup=activity_level()
    )


@user_router.callback_query(UserData.activity)
async def calculate_bju(call: CallbackQuery, state: FSMContext):
    activity_levels = {
        "low_activity": 1.2,
        "moderate_activity": 1.375,
        "high_activity": 1.55
    }
    activity = activity_levels.get(call.data)
    if not activity:
        await call.message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        return
    await state.update_data(activity=activity)
    data = await state.get_data()
    gender = data["gender"]
    age = data["age"]
    weight = data["weight"]
    height = data["height"]
    goal = data["goal"]
    if gender == "–ú—É–∂—Å–∫–æ–π":
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    elif gender == "–ñ–µ–Ω—Å–∫–∏–π":
        bmr = 10 * weight + 6.25 * height - 5 * age - 161
    else:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª –Ω–µ —É–∫–∞–∑–∞–Ω.")
        return
    total_calories = bmr * activity
    if goal == "mass_gain":
        total_calories += 500
    elif goal == "weight_loss":
        total_calories -= 500
    proteins = round(total_calories * 0.3 / 4, 1)
    fats = round(total_calories * 0.3 / 9, 1)
    carbs = round(total_calories * 0.4 / 4, 1)
    try:
        await call.message.delete()
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    await call.message.answer(
        f"üìä *–í–∞—à–∏ —Ä–∞—Å—á–µ—Ç—ã:*\n"
        f"üéØ –¶–µ–ª—å: {'–ù–∞–±–æ—Ä –º–∞—Å—Å—ã' if goal == 'mass_gain' else '–ü–æ—Ö—É–¥–µ–Ω–∏–µ' if goal == 'weight_loss' else '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã'}\n"
        f"üî• *–ö–∞–ª–æ—Ä–∏–∏*: {round(total_calories)} –∫–∫–∞–ª\n"
        f"üçó *–ë–µ–ª–∫–∏*: {proteins} –≥\n"
        f"ü•ë *–ñ–∏—Ä—ã*: {fats} –≥\n"
        f"üçû *–£–≥–ª–µ–≤–æ–¥—ã*: {carbs} –≥\n",
        reply_markup=to_back(),
        parse_mode="Markdown"
    )
    await state.clear()


@user_router.callback_query(F.data == "the_info")
async def take_menu(call: CallbackQuery):
    try:
        await call.message.delete()
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    await call.message.answer(
        f"‚úÖ *–û–ù–õ–ê–ô–ù –í–ï–î–ï–ù–ò–ï:*\n"
        f"üìå *–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∞*\n"
        f"üìå *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é (–ö–ë–ñ–£)*\n"
        f"üìå *–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º –¥–æ–±–∞–≤–∫–∞–º*\n"
        f"üìå *–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π*\n"
        f"üìå *–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏* (–ø–µ—Ä–µ–ø–∏—Å–∫–∞, –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ –∑–≤–æ–Ω–∫–∏)\n\n"
        f"‚úÖ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è:*\n"
        f"üìå *–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –ö–ë–ñ–£ –ø–æ–¥ –≤–∞—à–∏ —Ü–µ–ª–∏*\n"
        f"üìå *–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Å–ø–ª–∏—Ç –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏*\n\n"
        f"‚ö†Ô∏è *–°—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è*: 1 –º–µ—Å—è—Ü —Å –º–æ–º–µ–Ω—Ç–∞ –æ–ø–ª–∞—Ç—ã.\n"
        f"‚ùóÔ∏è‚ùóÔ∏è *–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Å–ø–ª–∏—Ç –≤—ã–¥–∞–µ—Ç—Å—è 1 —Ä–∞–∑ –≤ –º–µ—Å—è—Ü*‚ùóÔ∏è‚ùó\n"
        f"‚ö†Ô∏è *–î–∞–ª–µ–µ —Ä–∞–∑–¥–µ–ª –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è*\n"
        f"üìå *–ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–∫—É–ø–∫–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞–Ω.*",
        reply_markup=to_back(),
        parse_mode="Markdown"
    )


@user_router.callback_query(F.data == "one_mouth")
async def take_men(call: CallbackQuery):
    user_id = call.from_user.id
    if not check_date_tranning(user_id):
        if user_id == ADMINS:
            await call.message.edit_text(
                text="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª",
                reply_markup=gender_for_trening()
            )
            return
        if not check_date_tranning(user_id):
            await call.message.answer("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
    add_date_tranning(user_id)
    await call.message.edit_text(
        text="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª",
        reply_markup=gender_for_trening()
    )


@user_router.callback_query(F.data == "the_man_tranning")
async def take_menu(call: CallbackQuery):
    await call.message.edit_text(text="""–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏?"""
                                 , reply_markup=level_trening_mans())


@user_router.callback_query(F.data == "the_woman_trenning")
async def take_menu(call: CallbackQuery):
    await call.message.edit_text(text="""–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏?"""
                                 , reply_markup=level_trening_wooman())


@user_router.callback_query(F.data == "hard_level_m")
async def get_program(callback_query: CallbackQuery, bot: Bot):
    PLANS_DIRECTORY = "/root/bot/Files/man/senior"

    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏: {PLANS_DIRECTORY}")
    print(f"üîç –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞? {os.path.exists(PLANS_DIRECTORY)}")
    try:
        if not os.path.exists(PLANS_DIRECTORY):
            print(f"‚ùå –û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ {PLANS_DIRECTORY} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            await bot.answer_callback_query(callback_query.id, text="–û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        files = [f for f in os.listdir(PLANS_DIRECTORY) if f.endswith('.txt')]
        if not files:
            await bot.answer_callback_query(callback_query.id, text="–í –ø–∞–ø–∫–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
            return
        random_file = random.choice(files)
        file_path = os.path.join(PLANS_DIRECTORY, random_file)
        print(f"üìÇ –§–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {file_path}")
        with open(file_path, 'r', encoding='utf-8') as file:
            file_content = file.read()
        await bot.send_message(callback_query.from_user.id, file_content)
        await bot.answer_callback_query(callback_query.id, text="–í–∞—à —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        await bot.answer_callback_query(callback_query.id, text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@user_router.callback_query(F.data == "easy_level_m")
async def get_program(callback_query: CallbackQuery, bot: Bot):
    PLANS_DIRECTORY = "/root/bot/Files/man/jun"

    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏: {PLANS_DIRECTORY}")
    print(f"üîç –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞? {os.path.exists(PLANS_DIRECTORY)}")

    try:
        if not os.path.exists(PLANS_DIRECTORY):
            print(f"‚ùå –û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ {PLANS_DIRECTORY} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            await bot.answer_callback_query(callback_query.id, text="–û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        files = [f for f in os.listdir(PLANS_DIRECTORY) if f.endswith('.txt')]
        if not files:
            await bot.answer_callback_query(callback_query.id, text="–í –ø–∞–ø–∫–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
            return
        random_file = random.choice(files)
        file_path = os.path.join(PLANS_DIRECTORY, random_file)
        print(f"üìÇ –§–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {file_path}")
        with open(file_path, 'r', encoding='utf-8') as file:
            file_content = file.read()
        await bot.send_message(callback_query.from_user.id, file_content)
        await bot.answer_callback_query(callback_query.id, text="–í–∞—à —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        await bot.answer_callback_query(callback_query.id, text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@user_router.callback_query(F.data == "hard_level_w")
async def get_program(callback_query: CallbackQuery, bot: Bot):
    # –ñ–µ—Å—Ç–∫–∏–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ (–¥–ª—è —Ç–µ—Å—Ç–∞)
    PLANS_DIRECTORY = "/root/bot/Files/wooman/senior"
    # –û—Ç–ª–∞–¥–∫–∞
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏: {PLANS_DIRECTORY}")
    print(f"üîç –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞? {os.path.exists(PLANS_DIRECTORY)}")
    try:
        if not os.path.exists(PLANS_DIRECTORY):
            print(f"‚ùå –û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ {PLANS_DIRECTORY} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            await bot.answer_callback_query(callback_query.id, text="–û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        files = [f for f in os.listdir(PLANS_DIRECTORY) if f.endswith('.txt')]
        if not files:
            await bot.answer_callback_query(callback_query.id, text="–í –ø–∞–ø–∫–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
            return
        random_file = random.choice(files)
        file_path = os.path.join(PLANS_DIRECTORY, random_file)
        print(f"üìÇ –§–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {file_path}")
        with open(file_path, 'r', encoding='utf-8') as file:
            file_content = file.read()
        await bot.send_message(callback_query.from_user.id, file_content)
        await bot.answer_callback_query(callback_query.id, text="–í–∞—à —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        await bot.answer_callback_query(callback_query.id, text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@user_router.callback_query(F.data == "easy_level_w")
async def get_program(callback_query: CallbackQuery, bot: Bot):
    # –ñ–µ—Å—Ç–∫–∏–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ (–¥–ª—è —Ç–µ—Å—Ç–∞)
    PLANS_DIRECTORY = "/root/bot/Files/wooman/jun"
    # –û—Ç–ª–∞–¥–∫–∞
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏: {PLANS_DIRECTORY}")
    print(f"üîç –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞? {os.path.exists(PLANS_DIRECTORY)}")
    try:
        if not os.path.exists(PLANS_DIRECTORY):
            print(f"‚ùå –û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ {PLANS_DIRECTORY} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            await bot.answer_callback_query(callback_query.id, text="–û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        files = [f for f in os.listdir(PLANS_DIRECTORY) if f.endswith('.txt')]
        if not files:
            await bot.answer_callback_query(callback_query.id, text="–í –ø–∞–ø–∫–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
            return
        random_file = random.choice(files)
        file_path = os.path.join(PLANS_DIRECTORY, random_file)
        print(f"üìÇ –§–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {file_path}")
        with open(file_path, 'r', encoding='utf-8') as file:
            file_content = file.read()
        await bot.send_message(callback_query.from_user.id, file_content)
        await bot.answer_callback_query(callback_query.id, text="–í–∞—à —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        await bot.answer_callback_query(callback_query.id, text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
