import os
import asyncio
import logging
from typing import Optional, Tuple

from dotenv import load_dotenv
from yookassa import Configuration, Payment

from tgbot.keyboards.inline import training_period
from tgbot.database import add_payment

logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s] %(levelname)s ‚Äî %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

load_dotenv()


class PaymentService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YooKassa API."""

    def __init__(self):
        self.shop_id = os.getenv("YOOKASSA_SHOP_ID")
        self.secret_key = os.getenv("YOOKASSA_SECRET_KEY")
        self.return_url = os.getenv("YOOKASSA_RETURN_URL", "https://t.me/yourbot")

        Configuration.account_id = self.shop_id
        Configuration.secret_key = self.secret_key

    def create_payment(self, amount: float, description: str, email: str = "user@example.com") -> Tuple[str, str]:
        """
        –°–æ–∑–¥–∞—ë—Ç –ø–ª–∞—Ç—ë–∂ –≤ YooKassa.
        :param amount: —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
        :param description: –æ–ø–∏—Å–∞–Ω–∏–µ
        :param email: email –∫–ª–∏–µ–Ω—Ç–∞
        :return: (payment_id, confirmation_url)
        """
        try:
            payment = Payment.create({
                "amount": {"value": f"{amount:.2f}", "currency": "RUB"},
                "confirmation": {"type": "redirect", "return_url": self.return_url},
                "capture": True,
                "description": description,
                "receipt": {
                    "customer": {"email": email},
                    "items": [{
                        "description": description,
                        "quantity": 1,
                        "amount": {"value": f"{amount:.2f}", "currency": "RUB"},
                        "vat_code": 1,
                        "payment_mode": "full_prepayment",
                        "payment_subject": "service",
                    }],
                }
            })
            logging.info("üí≥ –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç—ë–∂: %s (%s ‚ÇΩ)", payment.id, amount)
            return payment.id, payment.confirmation.confirmation_url
        except Exception as e:
            logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: %s", e)
            raise

    def check_payment_status(self, payment_id: str) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞."""
        try:
            payment = Payment.find_one(payment_id)
            return payment.status
        except Exception as e:
            logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ %s: %s", payment_id, e)
            return None

    async def check_payment_loop(self, payment_id: str, user_id: int, bot, timeout: int = 300) -> None:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã (–¥–æ 5 –º–∏–Ω—É—Ç).
        :param payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
        :param user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param bot: —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        :param timeout: —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300)
        """
        logging.info("‚è≥ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: %s", payment_id)

        for _ in range(timeout // 30):  # –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫, –ø–æ–∫–∞ –Ω–µ –≤—ã–π–¥–µ—Ç –≤—Ä–µ–º—è
            await asyncio.sleep(30)
            status = self.check_payment_status(payment_id)

            if status == "succeeded":
                add_payment(user_id)
                await bot.send_message(
                    user_id,
                    "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º.",
                    reply_markup=training_period()
                )
                logging.info("‚úÖ –ü–ª–∞—Ç—ë–∂ %s –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ (user_id=%s)", payment_id, user_id)
                return

            elif status == "canceled":
                await bot.send_message(user_id, "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                logging.warning("‚ùå –ü–ª–∞—Ç—ë–∂ %s –æ—Ç–º–µ–Ω—ë–Ω (user_id=%s)", payment_id, user_id)
                return

        await bot.send_message(user_id, "‚åõ –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –µ—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.")
        logging.warning("‚åõ –ü–ª–∞—Ç—ë–∂ %s –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª—Å—è –∑–∞ %s —Å–µ–∫—É–Ω–¥", payment_id, timeout)
